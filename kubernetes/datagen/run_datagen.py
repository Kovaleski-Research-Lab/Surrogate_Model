# Import: Basic Python Libraries

import os
import sys
import yaml
import time
import shutil
import atexit
import datetime
import subprocess

from dateutil.tz import tzutc
from kubernetes import client, config
from jinja2 import Environment, FileSystemLoader

# Create: Response, Program Exit

def exit_handler(): # always run this script after this file ends.

    config.load_kube_config()   # python can see the kube config now. now we can run API commands.

    v1 = client.CoreV1Api()   # initializing a tool to do kube stuff.

    pod_list = v1.list_namespaced_pod(namespace = params["namespace"])    # get all pods currently running (1 pod generates a single meep sim) 

    current_group = [ele.metadata.owner_references[0].name for ele in pod_list.items if(params["kill_tag"] in ele.metadata.name)]    # getting the name of the pod

    current_group = list(set(current_group))    # remove any duplicates

    for job_name in current_group:
        subprocess.run(["kubectl", "delete", "job", job_name])    # delete the kube job (a.k.a. pod)

    print("\nCleaned up any jobs that include tag : %s\n" % params["kill_tag"])   

# Create: Results Folders

def create_folder(path):

    if(os.path.exists(path)):
        shutil.rmtree(path)

    os.makedirs(path)

# Save: Template File

def save_file(path, data):

    data_file = open(path, "w")
   
    data_file.write(data) 

    data_file.close()

# Load: Template File

def load_file(path):

    data_file = open(path, "r")
    
    info = ""

    for line in data_file:
        info += line

    data_file.close()

    return info

# Run: Parallelized Physics Simulatiion

def run_generation(params):

    # Load job template

    template = load_file(params["path_template"])

    tag = params["path_template"].split("/")[-1]
    folder = params["path_template"].replace("/%s" % tag, "")
    environment = Environment(loader = FileSystemLoader(folder))
    template = environment.get_template(tag)

    # Launch Simulation Jobs

    create_folder(params["path_sim_job_files"])

    # - Begin data generation

    print("\nLaunching Data Generation Jobs\n")

    counter = params["start_group_id"]

    current_group = [] 

    file_list = [0, 1, 2, 3, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 75, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 99, 100, 101, 102, 103, 104, 105, 108, 110, 111, 112, 113, 114, 115, 116, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 165, 168, 169, 171, 172, 173, 175, 176, 177, 178, 179, 180, 183, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 199, 202, 204, 206, 207, 208, 213, 214, 215, 218, 219, 220, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 250, 251, 255, 259, 261, 264, 265, 266, 267, 268, 270, 273, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 299, 300, 302, 303, 304, 315, 316, 317, 318, 319, 320, 321, 322, 323, 327, 329, 333, 334, 337, 338, 339, 341, 346, 347, 348, 349, 351, 352, 353, 354, 357, 361, 365, 367, 368, 370, 371, 372, 373, 375, 376, 380, 381, 382, 383, 384, 385, 388, 390, 392, 394, 398, 400, 401, 402, 403, 405, 410, 412, 413, 414, 415, 416, 417, 419, 420, 422, 423, 424, 427, 428, 429, 430, 431, 433, 440, 441, 447, 448, 450, 452, 453, 454, 455, 456, 457, 458, 462, 463, 464, 465, 469, 470, 474, 481, 482, 483, 484, 485, 486, 487, 488, 490, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 505, 507, 508, 510, 515, 517, 518, 520, 524, 525, 526, 530, 531, 539, 540, 542, 543, 545, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 564, 565, 566, 570, 572, 574, 581, 582, 583, 584, 586, 587, 588, 589, 591, 592, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 608, 610, 614, 616, 618, 621, 622, 623, 626, 627, 628, 630, 634, 635, 636, 637, 638, 642, 645, 646, 647, 648, 649, 652, 653, 656, 657, 658, 660, 661, 664, 666, 668, 671, 672, 673, 677, 679, 680, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 703, 704, 705, 710, 712, 714, 715, 716, 719, 720, 721, 723, 727, 728, 729, 730, 732, 736, 737, 739, 740, 742, 746, 747, 748, 750, 751, 753, 755, 756, 757, 758, 759, 760, 761, 762, 765, 769, 770, 771, 772, 775, 776, 777, 778, 779, 781, 784, 785, 787, 788, 792, 798, 799, 800, 801, 802, 803, 805, 808, 809, 810, 811, 812, 814, 815, 817, 818, 819, 820, 821, 827, 828, 829, 831, 832, 833, 834, 839, 841, 843, 844, 847, 848, 849, 850, 851, 855, 856, 858, 860, 861, 863, 865, 868, 869, 872, 876, 878, 879, 880, 885, 886, 890, 892, 893, 895, 896, 897, 899, 900, 901, 902, 904, 905, 906, 909, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 929, 932, 933, 934, 935, 939, 940, 941, 944, 948, 949, 950, 951, 952, 954, 955, 956, 960, 964, 965, 966, 967, 975, 976, 977, 978, 982, 983, 985, 986, 987, 988, 989, 991, 994, 997, 998, 1029, 1034, 1035, 1048, 1050, 1051, 1052, 1053, 1054, 1057, 1059, 1060, 1061, 1064, 1065, 1066, 1067, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1077, 1085, 1086, 1087, 1088, 1091, 1092, 1093, 1094, 1095, 1096, 1098, 1099, 1100, 1102, 1105, 1106, 1109, 1110, 1111, 1113, 1115, 1116, 1117, 1118, 1119, 1120, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1134, 1135, 1142, 1148, 1149, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1164, 1166, 1167, 1169, 1171, 1172, 1173, 1176, 1177, 1181, 1182, 1186, 1190, 1191, 1192, 1193, 1195, 1196, 1197, 1199, 1202, 1203, 1204, 1205, 1209, 1210, 1212, 1222, 1224, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1237, 1242, 1245, 1247, 1248, 1249, 1250, 1251, 1253, 1254, 1255, 1258, 1259, 1260, 1261, 1265, 1266, 1267, 1268, 1269, 1275, 1277, 1278, 1280, 1281, 1282, 1284, 1285, 1286, 1289, 1290, 1291, 1292, 1293, 1295, 1296, 1297, 1307, 1308, 1309, 1311, 1315, 1317, 1318, 1321, 1322, 1323, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1335, 1336, 1339, 1340, 1341, 1342, 1344, 1346, 1347, 1351, 1353, 1356, 1357, 1358, 1364, 1365, 1367, 1371, 1372, 1374, 1375, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1393, 1394, 1395, 1398, 1400, 1404, 1405, 1408, 1415, 1416, 1418, 1419, 1420, 1421, 1422, 1423, 1425, 1427, 1428, 1430, 1433, 1434, 1437, 1441, 1442, 1443, 1447, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1495, 1496, 1497, 1499, 1501, 1509, 1510, 1524, 1536, 1539, 1547, 1548, 1550, 1561, 1577, 1578, 1579, 1583, 1585, 1606, 1607, 1609, 1615, 1625, 1630, 1632, 1646, 1650, 1652, 1668, 1670, 1671, 1672, 1673, 1679, 1701, 1718, 1719, 1720, 1723, 1727, 1754, 1759, 1766, 1780, 1799, 1808, 1817, 1818, 1821, 1824, 1826, 1835, 1836, 1848, 1849, 1864, 1869, 1874, 1875, 1883, 1891, 1893, 1894, 1895, 1896, 1897, 1898, 1900, 1901, 1902, 1904, 1905, 1908, 1909, 1911, 1913, 1914, 1916, 1917, 1918, 1920, 1923, 1924, 1925, 1928, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1942, 1943, 1947, 1949, 1950, 1951, 1952, 1953, 1954, 1956, 1957, 1962, 1964, 1965, 1967, 1969, 1973, 1975, 1977, 1978, 1979, 1980, 1981, 1985, 1986, 1987, 1988, 1989, 1990, 1992, 1993, 1995, 1996, 1997, 1998, 1999, 2000, 2005, 2006, 2008, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2030, 2031, 2034, 2035, 2038, 2040, 2044, 2046, 2049, 2052, 2054, 2055, 2057, 2058, 2059, 2060, 2061, 2064, 2065, 2066, 2068, 2069, 2071, 2072, 2073, 2077, 2078, 2079, 2100, 2102, 2106, 2107, 2108, 2109, 2110, 2111, 2112, 2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129, 2130, 2132, 2134, 2136, 2144, 2148, 2150, 2151, 2154, 2156, 2160, 2161, 2162, 2163, 2188, 2193, 2195, 2206, 2209, 2210, 2211, 2212, 2213, 2214, 2215, 2235, 2236, 2240, 2241, 2242, 2243, 2246, 2253, 2269, 2270, 2271, 2272, 2278, 2280, 2282, 2286, 2290, 2294, 2296, 2303, 2304, 2305, 2308, 2310, 2311, 2312, 2323, 2325, 2335, 2340, 2342, 2343, 2344, 2348, 2350, 2353, 2356, 2363, 2366, 2367, 2371, 2372, 2373, 2374, 2375, 2376, 2378, 2379, 2381, 2382, 2384, 2388, 2389, 2390, 2395, 2399, 2402, 2403, 2404, 2406, 2407, 2408, 2410, 2412, 2413, 2414, 2415, 2416, 2418, 2420, 2422, 2424, 2427, 2428, 2431, 2434, 2435, 2436, 2437, 2438, 2440, 2443, 2444, 2445, 2447, 2448, 2449, 2452, 2453, 2454, 2457, 2460, 2462, 2466, 2467, 2468, 2469, 2470, 2471, 2473, 2474, 2476, 2477, 2483, 2484, 2485, 2486, 2487, 2488, 2490, 2492, 2493, 2495, 2496, 2497, 2498, 2499, 2500, 2501, 2503, 2504, 2505, 2507, 2509, 2512, 2522, 2524, 2525, 2526, 2527, 2528, 2529, 2530, 2531, 2532, 2535, 2537, 2538, 2541, 2542, 2545, 2547, 2550, 2552, 2553, 2554, 2560, 2569, 2570, 2573, 2574, 2579, 2580, 2581, 2582, 2583, 2585, 2588, 2589, 2597, 2598, 2599, 2600, 2601, 2602, 2604, 2605, 2606, 2607, 2608, 2609, 2610, 2613, 2614, 2615, 2618, 2619, 2620, 2629, 2630, 2631, 2635, 2636, 2637, 2638, 2640, 2642, 2644, 2645, 2646, 2651, 2652, 2653, 2657, 2658, 2659, 2662, 2664, 2665, 2666, 2668, 2670, 2671, 2672, 2674, 2675, 2676, 2678, 2679, 2680, 2681, 2686, 2688, 2689, 2691, 2694, 2698, 2701, 2702, 2703, 2704, 2705, 2706, 2707, 2708, 2709, 2711, 2712, 2713, 2718, 2719, 2720, 2722, 2726, 2727, 2729, 2731, 2734, 2738, 2739, 2740, 2741, 2743, 2744, 2745, 2746, 2748, 2749, 2750, 2753, 2754, 2755, 2756, 2760, 2763, 2764, 2765, 2766, 2768, 2769, 2770, 2771, 2773, 2776, 2778, 2780, 2781, 2782, 2784, 2786, 2789, 2791, 2792, 2793, 2795, 2796, 2797, 2798, 2803, 2804, 2808, 2809, 2810, 2811, 2812, 2814, 2815, 2816, 2819, 2820, 2821, 2822, 2823, 2825, 2829, 2830, 2831, 2834, 2836, 2840, 2841, 2842, 2846, 2847, 2848, 2849, 2851, 2858, 2859, 2862, 2863, 2864, 2865, 2866, 2869, 2870, 2871, 2874, 2875, 2879, 2880, 2882, 2885, 2886, 2887, 2888, 2891, 2897, 2898, 2899, 2900, 2903, 2904, 2905, 2907, 2908, 2910, 2912, 2917, 2927, 2928, 2929, 2930, 2931, 2932, 2933, 2934, 2937, 2939, 2943, 2944, 2945, 2946, 2947, 2948, 2950, 2954, 2955, 2956, 2958, 2959, 2960, 2963, 2964, 2967, 2968, 2969, 2970, 2971, 2974, 2975, 2976, 2977, 2978, 2979, 2980, 2981, 2982, 2983, 2984, 2985, 2986, 2987, 2988, 2989, 2990, 2991, 2992, 2993, 2994, 2995, 2996, 2997, 2998, 2999, 3000, 3001, 3002, 3003, 3004, 3005, 3006, 3007, 3008, 3009, 3010, 3012, 3013, 3014, 3016, 3017, 3019, 3020, 3021, 3022, 3023, 3024, 3025, 3027, 3029, 3030, 3031, 3033, 3034, 3036, 3038, 3045, 3049, 3050, 3054, 3061, 3063, 3068, 3069, 3070, 3071, 3072, 3073, 3074, 3077, 3079, 3080, 3081, 3083, 3085, 3089, 3095, 3097, 3101, 3103, 3104, 3107, 3109, 3110, 3111, 3112, 3113, 3114, 3115, 3116, 3120, 3125, 3130, 3131, 3132, 3133, 3135, 3139, 3140, 3147, 3150, 3151, 3153, 3154, 3155, 3160, 3163, 3164, 3167, 3168, 3169, 3170, 3172, 3173, 3174, 3176, 3177, 3178, 3184, 3186, 3187, 3188, 3190, 3191, 3192, 3193, 3195, 3196, 3198, 3199, 3206, 3211, 3212, 3213, 3214, 3221, 3222, 3223, 3224, 3228, 3229, 3230, 3231, 3232, 3233, 3237, 3239, 3242, 3243, 3244, 3248, 3249, 3250, 3251, 3256, 3258, 3260, 3267, 3268, 3279, 3280, 3281, 3298, 3299, 3303, 3306, 3307, 3309, 3311, 3321, 3322, 3325, 3327, 3333, 3334, 3339, 3360, 3361, 3362, 3363, 3364, 3365, 3366, 3370, 3372, 3379, 3382, 3390, 3392, 3394, 3402, 3405, 3406, 3408, 3409, 3413, 3427, 3429, 3432, 3440, 3441, 3443, 3450, 3451, 3452, 3454, 3455, 3457, 3463, 3464, 3465, 3475, 3476, 3480, 3482, 3483, 3495, 3497, 3500, 3501, 3507, 3508, 3509, 3510, 3518, 3522, 3524, 3525, 3535, 3546, 3547, 3550, 3551, 3554, 3556, 3557, 3561, 3564, 3567, 3572, 3574, 3582, 3585, 3586, 3593, 3603, 3605, 3614, 3615, 3620, 3622, 3624, 3625, 3632, 3633, 3637, 3641, 3642, 3648, 3652, 3653, 3656, 3657, 3665, 3667, 3668, 3669, 3671, 3683, 3684, 3685, 3688, 3690, 3694, 3697, 3699, 3704, 3705, 3711, 3713, 3714, 3715, 3723, 3726, 3732, 3733, 3737, 3739, 3741, 3752, 3755, 3756, 3761, 3771, 3773, 3774, 3777, 3778, 3779, 3783, 3785, 3793, 3801, 3804, 3806, 3811, 3812, 3815, 3818, 3824, 3839, 3842, 3843, 3848, 3853, 3855, 3858, 3859, 3862, 3864, 3865, 3873, 3874, 3876, 3877, 3881, 3894, 3896, 3905, 3909, 3913, 3914, 3916, 3919, 3924, 3925, 3928, 3935, 3937, 3938, 3947, 3949, 3951, 3953, 3959, 3961, 3962, 3966, 3968, 3972, 3975, 3982, 3983, 3985, 3986, 3994, 3995, 4000, 4001, 4003, 4007, 4011, 4012, 4013, 4014, 4017, 4018, 4019, 4031, 4038, 4041, 4050, 4051, 4056, 4057, 4059, 4063, 4066, 4073, 4076, 4078, 4083, 4085, 4086, 4088, 4106, 4107, 4116, 4122, 4125, 4126, 4127, 4128, 4130, 4136, 4144, 4145, 4147, 4157, 4158, 4159, 4160, 4165, 4168, 4169, 4175, 4181, 4183, 4187, 4192, 4193, 4195, 4197, 4199, 4203, 4207, 4214, 4216, 4223, 4224, 4225, 4226, 4228, 4230, 4234, 4235, 4236, 4237, 4245, 4251, 4258, 4263, 4266, 4267, 4270, 4271, 4272, 4276, 4281, 4284, 4287, 4295, 4296, 4298, 4313, 4314, 4318, 4319, 4320, 4323, 4324, 4332, 4334, 4335, 4343, 4344, 4346, 4349, 4363, 4366, 4368, 4371, 4372, 4373, 4374, 4376, 4383, 4388, 4389, 4390, 4391, 4401, 4404, 4408, 4410, 4413, 4416, 4418, 4419, 4422, 4431, 4434, 4437, 4441, 4443, 4444, 4447, 4450, 4456, 4461, 4465, 4472, 4473, 4474, 4476, 4477, 4482, 4483, 4491, 4500, 4502, 4503, 4504, 4505, 4506, 4508, 4510, 4517, 4521, 4522, 4523, 4524, 4533, 4534, 4536, 4542, 4549, 4555, 4557, 4558, 4559, 4560, 4561, 4562, 4563, 4564, 4565, 4566, 4567, 4568, 4569, 4570, 4571, 4572, 4573, 4574, 4575, 4576, 4577, 4578, 4579, 4580, 4581, 4582, 4583, 4584, 4585, 4586, 4587, 4588, 4589, 4590, 4591, 4592, 4593, 4594, 4595, 4596, 4597, 4598, 4599, 4600, 4601, 4602, 4603, 4604, 4605, 4606, 4607, 4608, 4609, 4610, 4611, 4612, 4613, 4614, 4615, 4616, 4617, 4618, 4619, 4620, 4621, 4623, 4624, 4625, 4626, 4628, 4629, 4632, 4633, 4635, 4636, 4640, 4641, 4642, 4646, 4648, 4650, 4654, 4656, 4658, 4662, 4663, 4664, 4666, 4667, 4671, 4684, 4692, 4700, 4701, 4702, 4704, 4705, 4708, 4709, 4710, 4711, 4713, 4714, 4715, 4719, 4721, 4722, 4724, 4727, 4733, 4734, 4736, 4737, 4738, 4747, 4748, 4750, 4751, 4755, 4760, 4762, 4763, 4766, 4777, 4781, 4782, 4786, 4787, 4790, 4791, 4792, 4793, 4794, 4795, 4796, 4803, 4804, 4805, 4807, 4809, 4810, 4811, 4813, 4814, 4815, 4816, 4818, 4819, 4820, 4824, 4825, 4826, 4827, 4830, 4833, 4837, 4841, 4842, 4844, 4850, 4851, 4852, 4853, 4855, 4856, 4860, 4861, 4863, 4867, 4870, 4879, 4881, 4882, 4885, 4888, 4898, 4900, 4901, 4902, 4908, 4910, 4913, 4922, 4923, 4924, 4936, 4947, 4948, 4949, 4950, 4951, 4952, 4953, 4954, 4955, 4956, 4957, 4959, 4960, 4961, 4962, 4963, 4964, 4965, 4966, 4967, 4968, 4969, 4970, 4971, 4972, 4973, 4974, 4975, 4976, 4977, 4978, 4979, 4980, 4981, 4982, 4983, 4984, 4985, 4986, 4987, 4988, 4989, 4990, 4991, 4992, 4993, 4994, 4995, 4996, 4997, 4998, 4999]    

    while(counter < params["num_sims"] and counter not in file_list):
        print(f"counter is {counter}")
        counter += 1
    exit()

    while(counter < params["num_sims"]):
        # -- Launch jobs if there is room in processing group

        if(len(current_group) < params["num_parallel_ops"]):

            num_to_launch = params["num_parallel_ops"] - len(current_group)

            if counter not in file_list:
                for i in range(counter, counter + num_to_launch):

                    # --- Configure simulation job

                    job_name = "%s-%s" % (params["kill_tag"], str(counter).zfill(6))

                    current_group.append(job_name)

                    template_info = {"job_name": job_name, 
                                     "n_index": str(counter),
                                     "num_cpus": str(params["num_cpus_per_op"]),
                                     "num_mem_lim": str(params["num_mem_lim"]),
                                     "num_mem_req": str(params["num_mem_req"]),
                                     "path_out_sims": params["path_simulations"], "path_image": params["path_image"], "path_logs": params["path_logs"]}

                    filled_template = template.render(template_info)

                    path_job = os.path.join(params["path_sim_job_files"], job_name + ".yaml") 

                    if(sys.platform == "win32"):
                        path_job = path_job.replace("\\", "/").replace("/", "\\")

                    # --- Save simulation job file

                    save_file(path_job, filled_template)

                    # --- Launch simulation job

                    subprocess.run(["kubectl", "apply", "-f", path_job])

                counter += 1

        # -- Wait for a processes to finish

        else:

            k = 0
            check_time_min = 2
            wait_time_sec = 60

            while(len(current_group) == params["num_parallel_ops"]): 

                time.sleep(wait_time_sec)

                # --- Check progress every n minutes

                if(k % check_time_min == 0): 

                    # --- Gather kubernetes information

                    config.load_kube_config()
                    v1 = client.CoreV1Api()
                    pod_list = v1.list_namespaced_pod(namespace = params["namespace"], timeout_seconds = 300)
            
                    if(k == 0):
                        print()

                    pod_list = [item for item in pod_list.items if(params["kill_tag"] in item.metadata.name)]

                    pod_names = [item.metadata.name for item in pod_list]
                    pod_statuses = [item.status.phase for item in pod_list]

                    # --- Remove pods that have finished. Jobs and pods share the same name.
                    
                    pod_progress = [1 if(phase == "Succeeded" or phase == "Error") else 0 for phase in pod_statuses]

                    for i, (job_name, remove_flag) in enumerate(zip(current_group, pod_progress)):
                        if(remove_flag):
                            print()
                            #time.sleep(wait_time_sec)
                            subprocess.run(["kubectl", "delete", "job", job_name])
                            current_group.pop(i)
                            print()

                    print("Log: Elapsed Time = %s minutes, Group Size = %s, Total (In Progress) = %s / %s" % ((wait_time_sec * (k + 1)) / 60, len(current_group), counter, params["num_sims"]))

                    if(sum(pod_progress) > 0):
                        print("\nJobs Finished. Updating...\n")
                        break                    

                k += 1

    print("\nData Generation Complete\n")

# Validate: Configuration File

def load_config(argument):

    try:
        return yaml.load(open(argument), Loader = yaml.FullLoader) 

    except Exception as e:
        print("\nError: Loading YAML Configuration File") 
        print("\nSuggestion: Using YAML file? Check File For Errors\n")
        print(e)
        exit()        

# Parse: Command-line Arguments

def parse_args(all_args, tags = ["--", "-"]):

    all_args = all_args[1:]

    if(len(all_args) % 2 != 0):
        print("Argument '%s' not defined" % all_args[-1])
        exit()

    results = {}

    i = 0
    while(i < len(all_args) - 1):
        arg = all_args[i].lower()
        for current_tag in tags:
            if(current_tag in arg):
                arg = arg.replace(current_tag, "")                
        results[arg] = all_args[i + 1]
        i += 2

    return results

# Main: Load Configuration File

if __name__ == "__main__":

    args = parse_args(sys.argv)

    params = load_config(args["config"]) 

    #atexit.register(exit_handler)  # this is how we clean up jobs. 
    run_generation(params)
    
